#!/bin/bash

set -euo pipefail

COLOR_BLUE='\033[0;34m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_RED='\033[0;31m'
COLOR_NC='\033[0m'

REGISTRY="ghcr.io"
DEFAULT_TAG="latest"

show_help() {
    echo -e "${COLOR_GREEN}GitHub Container Registry Docker Image Push Script${COLOR_NC}"
    echo ""
    echo -e "${COLOR_YELLOW}‰ΩøÁî®ÊñπÊ≥ï:${COLOR_NC}"
    echo -e "  $0 [OPTIONS]"
    echo ""
    echo -e "${COLOR_YELLOW}„Ç™„Éó„Ç∑„Éß„É≥:${COLOR_NC}"
    echo -e "  -r, --repo REPO        „É™„Éù„Ç∏„Éà„É™Âêç„ÇíÊåáÂÆö (owner/repoÂΩ¢Âºè)"
    echo -e "  -t, --tag TAG          „Ç§„É°„Éº„Ç∏„Çø„Ç∞„ÇíÊåáÂÆö („Éá„Éï„Ç©„É´„Éà: ${DEFAULT_TAG})"
    echo -e "  -u, --username USER    GitHub „É¶„Éº„Ç∂„ÉºÂêç„ÇíÊåáÂÆö"
    echo -e "  -p, --token TOKEN      GitHub Personal Access Token„ÇíÊåáÂÆö"
    echo -e "  -d, --dry-run          ÂÆüÈöõ„Å´„ÅØÂÆüË°å„Åõ„Åö„ÄÅÂÆüË°å‰∫àÂÆö„ÅÆÂÜÖÂÆπ„ÇíË°®Á§∫"
    echo -e "  -h, --help             „Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫"
    echo ""
    echo -e "${COLOR_YELLOW}ÂâçÊèêÊù°‰ª∂:${COLOR_NC}"
    echo -e "  - Docker „Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®"
    echo -e "  - GitHub Personal Access Token (packages:writeÊ®©Èôê) „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®"
    echo -e "  - „É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆ write Ê®©Èôê„Åå„ÅÇ„Çã„Åì„Å®"
    echo ""
    echo -e "${COLOR_YELLOW}‰æã:${COLOR_NC}"
    echo -e "  $0 -r owner/repo -u username -p ghp_token"
    echo -e "  $0 --dry-run"
    echo -e "  $0 --help"
}

check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        echo -e "${COLOR_RED}„Ç®„É©„Éº: Docker „Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
        exit 1
    fi
}

docker_login() {
    local username="$1"
    local token="$2"
    local dry_run="$3"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Docker login to ${REGISTRY}"
        return
    fi

    echo -e "${COLOR_BLUE}GitHub Container Registry „Å´„É≠„Ç∞„Ç§„É≥‰∏≠...${COLOR_NC}"
    echo "$token" | docker login "$REGISTRY" -u "$username" --password-stdin

    if [ $? -eq 0 ]; then
        echo -e "${COLOR_GREEN}‚úÖ „É≠„Ç∞„Ç§„É≥„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü${COLOR_NC}"
    else
        echo -e "${COLOR_RED}‚ùå „É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü${COLOR_NC}" >&2
        exit 1
    fi
}

build_and_push_image() {
    local repo="$1"
    local tag="$2"
    local dry_run="$3"

    local image_name="${REGISTRY}/${repo}:${tag}"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Docker buildx build and push (multi-arch): $image_name"
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Platforms: linux/amd64,linux/arm64"
        return
    fi

    # Docker Buildx„ÅåÂà©Áî®ÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if ! docker buildx version >/dev/null 2>&1; then
        echo -e "${COLOR_RED}„Ç®„É©„Éº: Docker Buildx „ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
        echo -e "${COLOR_YELLOW}Docker Buildx „Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã„Åã„ÄÅDocker Desktop „Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ${COLOR_NC}" >&2
        exit 1
    fi

    # „Éû„É´„ÉÅ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éì„É´„ÉÄ„Éº„Çí‰ΩúÊàê„Åæ„Åü„ÅØ‰ΩøÁî®
    local builder_name="multiarch-builder"
    if ! docker buildx inspect "$builder_name" >/dev/null 2>&1; then
        echo -e "${COLOR_BLUE}„Éû„É´„ÉÅ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éì„É´„ÉÄ„Éº„Çí‰ΩúÊàê‰∏≠...${COLOR_NC}"
        docker buildx create --name "$builder_name" --driver docker-container --use
        docker buildx inspect --bootstrap
    else
        echo -e "${COLOR_BLUE}Êó¢Â≠ò„ÅÆ„Éû„É´„ÉÅ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éì„É´„ÉÄ„Éº„Çí‰ΩøÁî®: $builder_name${COLOR_NC}"
        docker buildx use "$builder_name"
    fi

    echo -e "${COLOR_BLUE}Docker „Ç§„É°„Éº„Ç∏„Çí„Éû„É´„ÉÅ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Åß„Éì„É´„Éâ„Éª„Éó„ÉÉ„Ç∑„É•‰∏≠...${COLOR_NC}"
    echo -e "${COLOR_BLUE}ÂØæË±°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†: linux/amd64, linux/arm64${COLOR_NC}"

    docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --tag "$image_name" \
        --push \
        .

    if [ $? -eq 0 ]; then
        echo -e "${COLOR_GREEN}‚úÖ „Éû„É´„ÉÅ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éì„É´„Éâ„Éª„Éó„ÉÉ„Ç∑„É•„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü: $image_name${COLOR_NC}"
        echo -e "${COLOR_GREEN}  - linux/amd64${COLOR_NC}"
        echo -e "${COLOR_GREEN}  - linux/arm64${COLOR_NC}"
    else
        echo -e "${COLOR_RED}‚ùå „Éû„É´„ÉÅ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éì„É´„Éâ„Éª„Éó„ÉÉ„Ç∑„É•„Å´Â§±Êïó„Åó„Åæ„Åó„Åü${COLOR_NC}" >&2
        exit 1
    fi
}

update_compose_file() {
    local repo="$1"
    local tag="$2"
    local dry_run="$3"

    local image_name="${REGISTRY}/${repo}:${tag}"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Update compose.yml with image: $image_name"
        return
    fi

    echo -e "${COLOR_BLUE}compose.yml „ÇíÊõ¥Êñ∞‰∏≠...${COLOR_NC}"

    # compose.yml„ÅÆapi„Çµ„Éº„Éì„Çπ„ÅÆimage„ÇíÊõ¥Êñ∞
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s|image: api:latest|image: $image_name|g" compose.yml
    else
        # Linux
        sed -i "s|image: api:latest|image: $image_name|g" compose.yml
    fi

    echo -e "${COLOR_GREEN}‚úÖ compose.yml „ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü${COLOR_NC}"
}

main() {
    local repo=""
    local tag="$DEFAULT_TAG"
    local username=""
    local token=""
    local dry_run="false"

    while [[ $# -gt 0 ]]; do
        case $1 in
            -r|--repo)
                repo="$2"
                shift 2
                ;;
            -t|--tag)
                tag="$2"
                shift 2
                ;;
            -u|--username)
                username="$2"
                shift 2
                ;;
            -p|--token)
                token="$2"
                shift 2
                ;;
            -d|--dry-run)
                dry_run="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${COLOR_RED}„Ç®„É©„Éº: ‰∏çÊòé„Å™„Ç™„Éó„Ç∑„Éß„É≥ '$1'${COLOR_NC}" >&2
                show_help
                exit 1
                ;;
        esac
    done

    # „É™„Éù„Ç∏„Éà„É™Âêç„ÅÆËá™ÂãïÊ§úÂá∫
    if [ -z "$repo" ]; then
        if git remote get-url origin >/dev/null 2>&1; then
            repo_url=$(git remote get-url origin)
            if [[ "$repo_url" =~ github\.com[:/]([^/]+/[^/]+)(\.git)?$ ]]; then
                repo="${BASH_REMATCH[1]}"
                repo="${repo%.git}"
                echo -e "${COLOR_BLUE}„É™„Éù„Ç∏„Éà„É™„ÇíËá™ÂãïÊ§úÂá∫: $repo${COLOR_NC}"
            fi
        fi

        if [ -z "$repo" ]; then
            echo -e "${COLOR_RED}„Ç®„É©„Éº: „É™„Éù„Ç∏„Éà„É™Âêç„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
            echo -e "${COLOR_YELLOW}-r „Ç™„Éó„Ç∑„Éß„É≥„Åß„É™„Éù„Ç∏„Éà„É™Âêç„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ (‰æã: owner/repo)${COLOR_NC}" >&2
            exit 1
        fi
    fi

    # GitHubË™çË®ºÊÉÖÂ†±„ÅÆÁ¢∫Ë™ç
    if [ -z "$username" ] && [ "$dry_run" = "false" ]; then
        if [ -n "${GITHUB_ACTOR:-}" ]; then
            username="$GITHUB_ACTOR"
            echo -e "${COLOR_BLUE}GitHub Actor „Çí‰ΩøÁî®: $username${COLOR_NC}"
        else
            # git„Ç≥„Éû„É≥„Éâ„Åß„É¶„Éº„Ç∂„ÉºÂêç„ÇíËá™ÂãïÂèñÂæó„ÇíË©¶Ë°å
            if git config user.name >/dev/null 2>&1; then
                git_username=$(git config user.name)
                echo -e "${COLOR_BLUE}GitË®≠ÂÆö„Åã„Çâ„É¶„Éº„Ç∂„ÉºÂêç„ÇíËá™ÂãïÊ§úÂá∫: $git_username${COLOR_NC}"
                username="$git_username"
            elif git remote get-url origin >/dev/null 2>&1; then
                # „É™„É¢„Éº„ÉàURL„Åã„Çâ„É¶„Éº„Ç∂„ÉºÂêç„ÇíÊäΩÂá∫
                repo_url=$(git remote get-url origin)
                if [[ "$repo_url" =~ github\.com[:/]([^/]+)/[^/]+(\.git)?$ ]]; then
                    git_username="${BASH_REMATCH[1]}"
                    echo -e "${COLOR_BLUE}Git „É™„É¢„Éº„ÉàURL„Åã„Çâ„É¶„Éº„Ç∂„ÉºÂêç„ÇíËá™ÂãïÊ§úÂá∫: $git_username${COLOR_NC}"
                    username="$git_username"
                fi
            fi

            if [ -z "$username" ]; then
                echo -e "${COLOR_RED}„Ç®„É©„Éº: GitHub „É¶„Éº„Ç∂„ÉºÂêç„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
                echo -e "${COLOR_YELLOW}‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÊñπÊ≥ï„Åß„É¶„Éº„Ç∂„ÉºÂêç„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ:${COLOR_NC}" >&2
                echo -e "${COLOR_YELLOW}  1. -u „Ç™„Éó„Ç∑„Éß„É≥„Åß„É¶„Éº„Ç∂„ÉºÂêç„ÇíÊåáÂÆö${COLOR_NC}" >&2
                echo -e "${COLOR_YELLOW}  2. git config user.name „ÅßGit„É¶„Éº„Ç∂„ÉºÂêç„ÇíË®≠ÂÆö${COLOR_NC}" >&2
                echo -e "${COLOR_YELLOW}  3. GITHUB_ACTORÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö${COLOR_NC}" >&2
                exit 1
            fi
        fi
    fi

    if [ -z "$token" ] && [ "$dry_run" = "false" ]; then
        if [ -n "${GITHUB_TOKEN:-}" ]; then
            token="$GITHUB_TOKEN"
            echo -e "${COLOR_BLUE}GITHUB_TOKEN „Çí‰ΩøÁî®${COLOR_NC}"
        else
            echo -e "${COLOR_RED}„Ç®„É©„Éº: GitHub Personal Access Token „ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
            echo -e "${COLOR_YELLOW}-p „Ç™„Éó„Ç∑„Éß„É≥„Åß„Éà„Éº„ÇØ„É≥„ÇíÊåáÂÆö„Åô„Çã„Åã„ÄÅGITHUB_TOKENÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ${COLOR_NC}" >&2
            exit 1
        fi
    fi

    check_docker

    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
    echo -e "  üöÄ ${COLOR_GREEN}GitHub Container Registry Push${COLOR_NC}"
    echo -e "  „É™„Éù„Ç∏„Éà„É™: ${COLOR_YELLOW}$repo${COLOR_NC}"
    echo -e "  „Çø„Ç∞: ${COLOR_YELLOW}$tag${COLOR_NC}"
    echo -e "  „Ç§„É°„Éº„Ç∏: ${COLOR_YELLOW}${REGISTRY}/${repo}:${tag}${COLOR_NC}"
    if [ "$dry_run" = "true" ]; then
        echo -e "  „É¢„Éº„Éâ: ${COLOR_YELLOW}DRY RUN${COLOR_NC}"
    fi
    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
    echo ""

    if [ "$dry_run" = "false" ]; then
        docker_login "$username" "$token" "$dry_run"
    fi

    build_and_push_image "$repo" "$tag" "$dry_run"
    update_compose_file "$repo" "$tag" "$dry_run"

    echo ""
    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
    echo -e "  üìä ${COLOR_GREEN}ÂÆå‰∫Ü${COLOR_NC}"
    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}ÂÆüÈöõ„ÅÆ„Éó„ÉÉ„Ç∑„É•„ÇíÂÆüË°å„Åô„Çã„Å´„ÅØ --dry-run „Ç™„Éó„Ç∑„Éß„É≥„ÇíÂ§ñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ${COLOR_NC}"
    else
        echo -e "${COLOR_GREEN}‚úÖ Docker „Ç§„É°„Éº„Ç∏„ÅÆ„Éó„ÉÉ„Ç∑„É•„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ${COLOR_NC}"
        echo -e "„Ç§„É°„Éº„Ç∏: ${COLOR_YELLOW}${REGISTRY}/${repo}:${tag}${COLOR_NC}"
        echo ""
        echo -e "${COLOR_BLUE}Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:${COLOR_NC}"
        echo -e "1. GitHub Actions „Åß„Åì„ÅÆ„Ç§„É°„Éº„Ç∏„Çí‰ΩøÁî®„Åß„Åç„Åæ„Åô"
        echo -e "2. „É≠„Éº„Ç´„É´„Åß„ÇÇ 'docker-compose up' „Åß„Åì„ÅÆ„Ç§„É°„Éº„Ç∏„Çí‰ΩøÁî®„Åß„Åç„Åæ„Åô"
    fi

    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
}

main "$@"
