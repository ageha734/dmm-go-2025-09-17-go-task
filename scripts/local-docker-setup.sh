#!/bin/bash

set -euo pipefail

COLOR_BLUE='\033[0;34m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_RED='\033[0;31m'
COLOR_NC='\033[0m'

REGISTRY="ghcr.io"
DEFAULT_TAG="latest"

show_help() {
    echo -e "${COLOR_GREEN}Local Docker Setup Script${COLOR_NC}"
    echo ""
    echo -e "${COLOR_YELLOW}‰ΩøÁî®ÊñπÊ≥ï:${COLOR_NC}"
    echo -e "  $0 [OPTIONS]"
    echo ""
    echo -e "${COLOR_YELLOW}„Ç™„Éó„Ç∑„Éß„É≥:${COLOR_NC}"
    echo -e "  -r, --repo REPO        „É™„Éù„Ç∏„Éà„É™Âêç„ÇíÊåáÂÆö (owner/repoÂΩ¢Âºè)"
    echo -e "  -t, --tag TAG          „Ç§„É°„Éº„Ç∏„Çø„Ç∞„ÇíÊåáÂÆö („Éá„Éï„Ç©„É´„Éà: ${DEFAULT_TAG})"
    echo -e "  -m, --mode MODE        ÂÆüË°å„É¢„Éº„Éâ (build|pull|status) („Éá„Éï„Ç©„É´„Éà: build)"
    echo -e "  -u, --username USER    GitHub „É¶„Éº„Ç∂„ÉºÂêç„ÇíÊåáÂÆö (pull„É¢„Éº„ÉâÊôÇ)"
    echo -e "  -p, --token TOKEN      GitHub Personal Access Token„ÇíÊåáÂÆö (pull„É¢„Éº„ÉâÊôÇ)"
    echo -e "  -d, --dry-run          ÂÆüÈöõ„Å´„ÅØÂÆüË°å„Åõ„Åö„ÄÅÂÆüË°å‰∫àÂÆö„ÅÆÂÜÖÂÆπ„ÇíË°®Á§∫"
    echo -e "  -h, --help             „Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫"
    echo ""
    echo -e "${COLOR_YELLOW}ÂÆüË°å„É¢„Éº„Éâ:${COLOR_NC}"
    echo -e "  build                  „É≠„Éº„Ç´„É´„ÅßDocker„Ç§„É°„Éº„Ç∏„Çí„Éì„É´„Éâ„Åó„Å¶compose.yml„ÇíÊõ¥Êñ∞"
    echo -e "  pull                   GitHub Container Registry„Åã„Çâ„Ç§„É°„Éº„Ç∏„Çí„Éó„É´„Åó„Å¶compose.yml„ÇíÊõ¥Êñ∞"
    echo -e "  status                 ÁèæÂú®„ÅÆcompose.yml„ÅÆË®≠ÂÆö„ÇíË°®Á§∫"
    echo ""
    echo -e "${COLOR_YELLOW}‰æã:${COLOR_NC}"
    echo -e "  $0 --mode build                    # „É≠„Éº„Ç´„É´„Éì„É´„Éâ"
    echo -e "  $0 --mode pull -u username -p token # „É¨„Ç∏„Çπ„Éà„É™„Åã„Çâ„Éó„É´"
    echo -e "  $0 --mode status                   # ÁèæÂú®„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç"
    echo -e "  $0 --dry-run"
}

check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        echo -e "${COLOR_RED}„Ç®„É©„Éº: Docker „Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
        exit 1
    fi
}

docker_login() {
    local username="$1"
    local token="$2"
    local dry_run="$3"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Docker login to ${REGISTRY}"
        return
    fi

    echo -e "${COLOR_BLUE}GitHub Container Registry „Å´„É≠„Ç∞„Ç§„É≥‰∏≠...${COLOR_NC}"
    echo "$token" | docker login "$REGISTRY" -u "$username" --password-stdin

    if [ $? -eq 0 ]; then
        echo -e "${COLOR_GREEN}‚úÖ „É≠„Ç∞„Ç§„É≥„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü${COLOR_NC}"
    else
        echo -e "${COLOR_RED}‚ùå „É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü${COLOR_NC}" >&2
        exit 1
    fi
}

build_local_image() {
    local dry_run="$1"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Docker build local image: api:latest"
        return
    fi

    echo -e "${COLOR_BLUE}„É≠„Éº„Ç´„É´„ÅßDocker„Ç§„É°„Éº„Ç∏„Çí„Éì„É´„Éâ‰∏≠...${COLOR_NC}"

    # ÁèæÂú®„ÅÆ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÇíÊ§úÂá∫
    local arch=$(uname -m)
    case $arch in
        x86_64)
            platform="linux/amd64"
            ;;
        arm64|aarch64)
            platform="linux/arm64"
            ;;
        *)
            platform="linux/amd64"
            echo -e "${COLOR_YELLOW}‚ö†Ô∏è  ‰∏çÊòé„Å™„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ ($arch)„ÄÅlinux/amd64„Çí‰ΩøÁî®„Åó„Åæ„Åô${COLOR_NC}"
            ;;
    esac

    echo -e "${COLOR_BLUE}ÂØæË±°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†: $platform${COLOR_NC}"

    # Docker Buildx„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ‰ΩøÁî®„ÄÅ„Åù„ÅÜ„Åß„Å™„Åë„Çå„Å∞ÈÄöÂ∏∏„ÅÆbuild„Çí‰ΩøÁî®
    if docker buildx version >/dev/null 2>&1; then
        docker buildx build --platform "$platform" -t api:latest --load .
    else
        docker build -t api:latest .
    fi

    if [ $? -eq 0 ]; then
        echo -e "${COLOR_GREEN}‚úÖ „Éì„É´„Éâ„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü${COLOR_NC}"
    else
        echo -e "${COLOR_RED}‚ùå „Éì„É´„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü${COLOR_NC}" >&2
        exit 1
    fi
}

pull_registry_image() {
    local repo="$1"
    local tag="$2"
    local dry_run="$3"

    local image_name="${REGISTRY}/${repo}:${tag}"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Docker pull: $image_name"
        return
    fi

    echo -e "${COLOR_BLUE}GitHub Container Registry „Åã„Çâ„Ç§„É°„Éº„Ç∏„Çí„Éó„É´‰∏≠...${COLOR_NC}"
    docker pull "$image_name"

    if [ $? -eq 0 ]; then
        echo -e "${COLOR_GREEN}‚úÖ „Éó„É´„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü: $image_name${COLOR_NC}"

        # „É≠„Éº„Ç´„É´„Çø„Ç∞„Çí‰ªò‰∏é
        docker tag "$image_name" api:latest
        echo -e "${COLOR_GREEN}‚úÖ „É≠„Éº„Ç´„É´„Çø„Ç∞ api:latest „Çí‰ªò‰∏é„Åó„Åæ„Åó„Åü${COLOR_NC}"
    else
        echo -e "${COLOR_RED}‚ùå „Éó„É´„Å´Â§±Êïó„Åó„Åæ„Åó„Åü${COLOR_NC}" >&2
        exit 1
    fi
}

update_compose_for_local() {
    local dry_run="$1"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Update compose.yml for local development"
        return
    fi

    echo -e "${COLOR_BLUE}compose.yml „Çí„É≠„Éº„Ç´„É´ÈñãÁô∫Áî®„Å´Êõ¥Êñ∞‰∏≠...${COLOR_NC}"

    # compose.yml„ÅÆapi„Çµ„Éº„Éì„Çπ„ÅÆimage„Çí„É≠„Éº„Ç´„É´Áî®„Å´Êàª„Åô
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s|image: ghcr\.io/[^:]*:[^[:space:]]*|image: api:latest|g" compose.yml
    else
        # Linux
        sed -i "s|image: ghcr\.io/[^:]*:[^[:space:]]*|image: api:latest|g" compose.yml
    fi

    echo -e "${COLOR_GREEN}‚úÖ compose.yml „Çí„É≠„Éº„Ç´„É´ÈñãÁô∫Áî®„Å´Êõ¥Êñ∞„Åó„Åæ„Åó„Åü${COLOR_NC}"
}

update_compose_with_registry_image() {
    local repo="$1"
    local tag="$2"
    local dry_run="$3"

    local image_name="${REGISTRY}/${repo}:${tag}"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}[DRY RUN]${COLOR_NC} Update compose.yml with registry image: $image_name"
        return
    fi

    echo -e "${COLOR_BLUE}compose.yml „Çí„É¨„Ç∏„Çπ„Éà„É™„Ç§„É°„Éº„Ç∏Áî®„Å´Êõ¥Êñ∞‰∏≠...${COLOR_NC}"

    # compose.yml„ÅÆapi„Çµ„Éº„Éì„Çπ„ÅÆimage„Çí„É¨„Ç∏„Çπ„Éà„É™„Ç§„É°„Éº„Ç∏„Å´Êõ¥Êñ∞
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s|image: api:latest|image: $image_name|g" compose.yml
    else
        # Linux
        sed -i "s|image: api:latest|image: $image_name|g" compose.yml
    fi

    echo -e "${COLOR_GREEN}‚úÖ compose.yml „Çí„É¨„Ç∏„Çπ„Éà„É™„Ç§„É°„Éº„Ç∏Áî®„Å´Êõ¥Êñ∞„Åó„Åæ„Åó„Åü${COLOR_NC}"
}

show_status() {
    echo -e "${COLOR_BLUE}ÁèæÂú®„ÅÆcompose.ymlË®≠ÂÆö:${COLOR_NC}"
    echo ""

    if [ -f "compose.yml" ]; then
        # api„Çµ„Éº„Éì„Çπ„ÅÆimageË®≠ÂÆö„ÇíÊäΩÂá∫
        local image_line=$(grep -A 10 "api:" compose.yml | grep "image:" | head -1)
        if [ -n "$image_line" ]; then
            echo -e "  API Image: ${COLOR_YELLOW}$(echo "$image_line" | sed 's/.*image: *//')${COLOR_NC}"

            if echo "$image_line" | grep -q "ghcr.io"; then
                echo -e "  „É¢„Éº„Éâ: ${COLOR_BLUE}Registry Image${COLOR_NC}"
            else
                echo -e "  „É¢„Éº„Éâ: ${COLOR_GREEN}Local Build${COLOR_NC}"
            fi
        else
            echo -e "  ${COLOR_RED}API image„ÅÆË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì${COLOR_NC}"
        fi
    else
        echo -e "  ${COLOR_RED}compose.yml „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì${COLOR_NC}"
    fi

    echo ""
    echo -e "${COLOR_BLUE}Âà©Áî®ÂèØËÉΩ„Å™Docker„Ç§„É°„Éº„Ç∏:${COLOR_NC}"
    docker images | grep -E "(api|ghcr.io)" || echo -e "  ${COLOR_YELLOW}Èñ¢ÈÄ£„Åô„Çã„Ç§„É°„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì${COLOR_NC}"
}

main() {
    local repo=""
    local tag="$DEFAULT_TAG"
    local mode="build"
    local username=""
    local token=""
    local dry_run="false"

    while [[ $# -gt 0 ]]; do
        case $1 in
            -r|--repo)
                repo="$2"
                shift 2
                ;;
            -t|--tag)
                tag="$2"
                shift 2
                ;;
            -m|--mode)
                mode="$2"
                shift 2
                ;;
            -u|--username)
                username="$2"
                shift 2
                ;;
            -p|--token)
                token="$2"
                shift 2
                ;;
            -d|--dry-run)
                dry_run="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${COLOR_RED}„Ç®„É©„Éº: ‰∏çÊòé„Å™„Ç™„Éó„Ç∑„Éß„É≥ '$1'${COLOR_NC}" >&2
                show_help
                exit 1
                ;;
        esac
    done

    # status„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÊó©Êúü„É™„Çø„Éº„É≥
    if [ "$mode" = "status" ]; then
        show_status
        exit 0
    fi

    # „É™„Éù„Ç∏„Éà„É™Âêç„ÅÆËá™ÂãïÊ§úÂá∫Ôºàpull„É¢„Éº„ÉâÊôÇ„ÅÆ„ÅøÂøÖË¶ÅÔºâ
    if [ "$mode" = "pull" ] && [ -z "$repo" ]; then
        if git remote get-url origin >/dev/null 2>&1; then
            repo_url=$(git remote get-url origin)
            if [[ "$repo_url" =~ github\.com[:/]([^/]+/[^/]+)(\.git)?$ ]]; then
                repo="${BASH_REMATCH[1]}"
                repo="${repo%.git}"
                echo -e "${COLOR_BLUE}„É™„Éù„Ç∏„Éà„É™„ÇíËá™ÂãïÊ§úÂá∫: $repo${COLOR_NC}"
            fi
        fi

        if [ -z "$repo" ]; then
            echo -e "${COLOR_RED}„Ç®„É©„Éº: „É™„Éù„Ç∏„Éà„É™Âêç„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
            echo -e "${COLOR_YELLOW}-r „Ç™„Éó„Ç∑„Éß„É≥„Åß„É™„Éù„Ç∏„Éà„É™Âêç„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ (‰æã: owner/repo)${COLOR_NC}" >&2
            exit 1
        fi
    fi

    check_docker

    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
    echo -e "  üöÄ ${COLOR_GREEN}Local Docker Setup${COLOR_NC}"
    echo -e "  „É¢„Éº„Éâ: ${COLOR_YELLOW}$mode${COLOR_NC}"
    if [ "$mode" = "pull" ]; then
        echo -e "  „É™„Éù„Ç∏„Éà„É™: ${COLOR_YELLOW}$repo${COLOR_NC}"
        echo -e "  „Çø„Ç∞: ${COLOR_YELLOW}$tag${COLOR_NC}"
    fi
    if [ "$dry_run" = "true" ]; then
        echo -e "  ÂÆüË°å: ${COLOR_YELLOW}DRY RUN${COLOR_NC}"
    fi
    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
    echo ""

    case "$mode" in
        "build")
            build_local_image "$dry_run"
            update_compose_for_local "$dry_run"
            ;;
        "pull")
            # GitHubË™çË®ºÊÉÖÂ†±„ÅÆÁ¢∫Ë™ç
            if [ -z "$username" ] && [ "$dry_run" = "false" ]; then
                if [ -n "${GITHUB_ACTOR:-}" ]; then
                    username="$GITHUB_ACTOR"
                    echo -e "${COLOR_BLUE}GitHub Actor „Çí‰ΩøÁî®: $username${COLOR_NC}"
                else
                    # git„Ç≥„Éû„É≥„Éâ„Åß„É¶„Éº„Ç∂„ÉºÂêç„ÇíËá™ÂãïÂèñÂæó„ÇíË©¶Ë°å
                    if git config user.name >/dev/null 2>&1; then
                        git_username=$(git config user.name)
                        echo -e "${COLOR_BLUE}GitË®≠ÂÆö„Åã„Çâ„É¶„Éº„Ç∂„ÉºÂêç„ÇíËá™ÂãïÊ§úÂá∫: $git_username${COLOR_NC}"
                        username="$git_username"
                    elif git remote get-url origin >/dev/null 2>&1; then
                        # „É™„É¢„Éº„ÉàURL„Åã„Çâ„É¶„Éº„Ç∂„ÉºÂêç„ÇíÊäΩÂá∫
                        repo_url=$(git remote get-url origin)
                        if [[ "$repo_url" =~ github\.com[:/]([^/]+)/[^/]+(\.git)?$ ]]; then
                            git_username="${BASH_REMATCH[1]}"
                            echo -e "${COLOR_BLUE}Git „É™„É¢„Éº„ÉàURL„Åã„Çâ„É¶„Éº„Ç∂„ÉºÂêç„ÇíËá™ÂãïÊ§úÂá∫: $git_username${COLOR_NC}"
                            username="$git_username"
                        fi
                    fi

                    if [ -z "$username" ]; then
                        echo -e "${COLOR_RED}„Ç®„É©„Éº: GitHub „É¶„Éº„Ç∂„ÉºÂêç„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
                        echo -e "${COLOR_YELLOW}‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÊñπÊ≥ï„Åß„É¶„Éº„Ç∂„ÉºÂêç„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ:${COLOR_NC}" >&2
                        echo -e "${COLOR_YELLOW}  1. -u „Ç™„Éó„Ç∑„Éß„É≥„Åß„É¶„Éº„Ç∂„ÉºÂêç„ÇíÊåáÂÆö${COLOR_NC}" >&2
                        echo -e "${COLOR_YELLOW}  2. git config user.name „ÅßGit„É¶„Éº„Ç∂„ÉºÂêç„ÇíË®≠ÂÆö${COLOR_NC}" >&2
                        echo -e "${COLOR_YELLOW}  3. GITHUB_ACTORÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö${COLOR_NC}" >&2
                        exit 1
                    fi
                fi
            fi

            if [ -z "$token" ] && [ "$dry_run" = "false" ]; then
                if [ -n "${GITHUB_TOKEN:-}" ]; then
                    token="$GITHUB_TOKEN"
                    echo -e "${COLOR_BLUE}GITHUB_TOKEN „Çí‰ΩøÁî®${COLOR_NC}"
                else
                    echo -e "${COLOR_RED}„Ç®„É©„Éº: GitHub Personal Access Token „ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ${COLOR_NC}" >&2
                    echo -e "${COLOR_YELLOW}-p „Ç™„Éó„Ç∑„Éß„É≥„Åß„Éà„Éº„ÇØ„É≥„ÇíÊåáÂÆö„Åô„Çã„Åã„ÄÅGITHUB_TOKENÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ${COLOR_NC}" >&2
                    exit 1
                fi
            fi

            if [ "$dry_run" = "false" ]; then
                docker_login "$username" "$token" "$dry_run"
            fi
            pull_registry_image "$repo" "$tag" "$dry_run"
            update_compose_with_registry_image "$repo" "$tag" "$dry_run"
            ;;
        *)
            echo -e "${COLOR_RED}„Ç®„É©„Éº: ‰∏çÊòé„Å™„É¢„Éº„Éâ '$mode'${COLOR_NC}" >&2
            echo -e "${COLOR_YELLOW}Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éº„Éâ: build, pull, status${COLOR_NC}" >&2
            exit 1
            ;;
    esac

    echo ""
    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
    echo -e "  üìä ${COLOR_GREEN}ÂÆå‰∫Ü${COLOR_NC}"
    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"

    if [ "$dry_run" = "true" ]; then
        echo -e "${COLOR_YELLOW}ÂÆüÈöõ„ÅÆÂÆüË°å„ÇíË°å„ÅÜ„Å´„ÅØ --dry-run „Ç™„Éó„Ç∑„Éß„É≥„ÇíÂ§ñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ${COLOR_NC}"
    else
        case "$mode" in
            "build")
                echo -e "${COLOR_GREEN}‚úÖ „É≠„Éº„Ç´„É´„Éì„É´„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ${COLOR_NC}"
                echo -e "Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: ${COLOR_BLUE}docker-compose up${COLOR_NC} „Åß„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíËµ∑Âãï„Åß„Åç„Åæ„Åô"
                ;;
            "pull")
                echo -e "${COLOR_GREEN}‚úÖ „É¨„Ç∏„Çπ„Éà„É™„Åã„Çâ„ÅÆ„Éó„É´„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ${COLOR_NC}"
                echo -e "Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: ${COLOR_BLUE}docker-compose up${COLOR_NC} „Åß„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíËµ∑Âãï„Åß„Åç„Åæ„Åô"
                ;;
        esac
    fi

    echo -e "${COLOR_BLUE}=================================================${COLOR_NC}"
}

main "$@"
