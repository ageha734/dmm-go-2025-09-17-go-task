name: E2E Test Performance Comparison

on:
  workflow_dispatch:

jobs:
  e2e-raw-commands:
    name: E2E Test - Raw Commands
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.24"

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Start timer
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Build Docker images
      run: |
        docker-compose build mysql api

    - name: Start services
      run: |
        docker-compose up -d mysql api

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 30

        # Check if API is responding
        max_attempts=30
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "API is ready!"
            break
          fi

          if [ $attempt -eq $max_attempts ]; then
            echo "API failed to start within timeout"
            docker-compose logs api
            exit 1
          fi

          echo "Attempt $attempt/$max_attempts - API not ready yet, waiting..."
          sleep 2
          attempt=$((attempt + 1))
        done

    - name: Run E2E tests with Raw Commands
      run: |
        # Install Hurl
        curl -LO https://github.com/Orange-OpenSource/hurl/releases/latest/download/hurl_4.3.0_amd64.deb
        sudo dpkg -i hurl_4.3.0_amd64.deb

        # Run health check tests
        echo "Running health check tests..."
        hurl --test e2e/home/index.hurl --variable host=localhost:8080

        # Run user API tests
        echo "Running user API tests..."
        hurl --test e2e/user/index.hurl --variable host=localhost:8080

    - name: Calculate execution time
      run: |
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        echo "RAW_COMMANDS_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "Raw commands execution time: ${EXECUTION_TIME} seconds"

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

    - name: Save execution time
      run: |
        echo "raw_commands,${{ env.RAW_COMMANDS_TIME }}" > raw_commands_time.csv

    - name: Upload execution time artifact
      uses: actions/upload-artifact@v3
      with:
        name: raw-commands-time
        path: raw_commands_time.csv

  e2e-make:
    name: E2E Test - Make
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.24"

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Start timer
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Build Docker images
      run: |
        docker-compose build mysql api

    - name: Start services
      run: |
        docker-compose up -d mysql api

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 30

        # Check if API is responding
        max_attempts=30
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "API is ready!"
            break
          fi

          if [ $attempt -eq $max_attempts ]; then
            echo "API failed to start within timeout"
            docker-compose logs api
            exit 1
          fi

          echo "Attempt $attempt/$max_attempts - API not ready yet, waiting..."
          sleep 2
          attempt=$((attempt + 1))
        done

    - name: Run E2E tests with Make
      run: make test-e2e

    - name: Calculate execution time
      run: |
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        echo "MAKE_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "Make execution time: ${EXECUTION_TIME} seconds"

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

    - name: Save execution time
      run: |
        echo "make,${{ env.MAKE_TIME }}" > make_time.csv

    - name: Upload execution time artifact
      uses: actions/upload-artifact@v3
      with:
        name: make-time
        path: make_time.csv

  e2e-task:
    name: E2E Test - Task
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.24"

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Install Task
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Start timer
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Build Docker images
      run: |
        docker-compose build mysql api

    - name: Start services
      run: |
        docker-compose up -d mysql api

    - name: Wait for services to be ready

        # Check if API is responding
        max_attempts=30
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "API is ready!"
            break
          fi

          if [ $attempt -eq $max_attempts ]; then
            echo "API failed to start within timeout"
            docker-compose logs api
            exit 1
          fi

          echo "Attempt $attempt/$max_attempts - API not ready yet, waiting..."
          sleep 2
          attempt=$((attempt + 1))
        done

    - name: Run E2E tests with Task
      run: task test:e2e

    - name: Calculate execution time
      run: |
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        echo "TASK_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "Task execution time: ${EXECUTION_TIME} seconds"

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

    - name: Save execution time
      run: |
        echo "task,${{ env.TASK_TIME }}" > task_time.csv

    - name: Upload execution time artifact
      uses: actions/upload-artifact@v3
      with:
        name: task-time
        path: task_time.csv

  compare-results:
    name: Compare Execution Times
    runs-on: ubuntu-latest
    needs: [e2e-raw-commands, e2e-make, e2e-task]
    if: always()

    steps:
    - name: Download all execution time artifacts
      uses: actions/download-artifact@v3

    - name: Combine results and create comparison
      run: |
        echo "method,execution_time_seconds" > comparison_results.csv

        if [ -f raw-commands-time/raw_commands_time.csv ]; then
          cat raw-commands-time/raw_commands_time.csv >> comparison_results.csv
        else
          echo "raw_commands,failed" >> comparison_results.csv
        fi

        if [ -f make-time/make_time.csv ]; then
          cat make-time/make_time.csv >> comparison_results.csv
        else
          echo "make,failed" >> comparison_results.csv
        fi

        if [ -f task-time/task_time.csv ]; then
          cat task-time/task_time.csv >> comparison_results.csv
        else
          echo "task,failed" >> comparison_results.csv
        fi

        echo "=== E2E Test Execution Time Comparison ==="
        cat comparison_results.csv

        # Create a summary
        echo "## E2E Test Performance Comparison Results" > comparison_summary.md
        echo "" >> comparison_summary.md
        echo "| Method | Execution Time (seconds) |" >> comparison_summary.md
        echo "|--------|-------------------------|" >> comparison_summary.md

        while IFS=',' read -r method time; do
          if [ "$method" != "method" ]; then
            echo "| $method | $time |" >> comparison_summary.md
          fi
        done < comparison_results.csv

        echo "" >> comparison_summary.md
        echo "Generated on: $(date)" >> comparison_summary.md

        cat comparison_summary.md

    - name: Upload comparison results
      uses: actions/upload-artifact@v3
      with:
        name: comparison-results
        path: |
          comparison_results.csv
          comparison_summary.md

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          try {
            const summary = fs.readFileSync('comparison_summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } catch (error) {
            console.log('Could not read comparison summary:', error);
          }
