name: E2E Test Performance Comparison

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate image tag
      id: image-tag
      run: |
        TAG="e2e-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ steps.image-tag.outputs.tag }}
          ghcr.io/${{ github.repository }}:latest

  e2e-raw-commands:
    name: E2E Test - Raw Commands
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment variables
      uses: ./.github/actions/setup-env

    - name: Setup Go Project
      uses: ./.github/actions/setup-go-project

    - name: Update compose.yml with registry image
      run: |
        IMAGE_NAME="ghcr.io/${{ github.repository }}:${{ needs.build-and-push-image.outputs.image-tag }}"
        sed -i "s|image: api:latest|image: $IMAGE_NAME|g" compose.yml
        echo "Updated compose.yml to use image: $IMAGE_NAME"

    - name: Setup Docker Services
      uses: ./.github/actions/setup-docker-services

    - name: Start timer
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Run E2E tests with Raw Commands
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client
        HURL_VERSION=$(curl -s https://api.github.com/repos/Orange-OpenSource/hurl/releases/latest | grep tag_name | cut -d '"' -f 4)
        curl -LO https://github.com/Orange-OpenSource/hurl/releases/latest/download/hurl-${HURL_VERSION}-x86_64-unknown-linux-gnu.tar.gz
        tar -xzf hurl-*.tar.gz
        sudo mv hurl-*/bin/hurl /usr/local/bin/
        rm -rf hurl-*.tar.gz

        curl --location https://raw.githubusercontent.com/ageha734/shlack/master/install.sh | bash

        EXIT_CODE=0
        for dir in e2e/*; do
          if [ -d "$dir" ]; then
            service_name=$(basename "$dir")
            echo "üöÄ [$service_name] „ÅÆ„ÉÜ„Çπ„Éà„ÇíÈñãÂßã„Åó„Åæ„Åô..."

            # Execute SQL files for database setup
            SQL_FILES=$(find "$dir" -name "*.sql")
            if [ -n "$SQL_FILES" ]; then
              for sql_file in $SQL_FILES; do
                echo "  - DB„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó: $sql_file"
                mysql -u root -h 127.0.0.1 -P 3306 -ppassword testdb < "$sql_file" || echo "‚ö†Ô∏è  $sql_file „ÅÆÂÆüË°å„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„Åå„ÄÅÁ∂ôÁ∂ö„Åó„Åæ„Åô"
              done
            fi

            # Run hurl test
            echo "  - API„ÉÜ„Çπ„Éà: $dir/index.hurl"
            if ! hurl --test "$dir/index.hurl"; then
              echo "‚ö†Ô∏è  [$service_name] „ÅÆAPI„ÉÜ„Çπ„Éà„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„Åå„ÄÅÁ∂ôÁ∂ö„Åó„Åæ„Åô"
              EXIT_CODE=1
            fi
            echo "‚úÖ [$service_name] „ÅÆ„ÉÜ„Çπ„Éà„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ"
          fi
        done

        if [ $EXIT_CODE -ne 0 ]; then
          echo "‚ö†Ô∏è  ‰∏ÄÈÉ®„ÅÆ„ÉÜ„Çπ„Éà„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„Åå„ÄÅÂÖ®„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Åæ„Åó„Åü„ÄÇ"
        else
          echo "‚úÖ ÂÖ®„Å¶„ÅÆE2E„ÉÜ„Çπ„Éà„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ"
        fi

        # „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅØÁ∂ôÁ∂öÔºàexit 0„ÅßÊ≠£Â∏∏ÁµÇ‰∫ÜÊâ±„ÅÑÔºâ
        exit 0

    - name: Calculate execution time
      run: |
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        echo "RAW_COMMANDS_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "Raw commands execution time: ${EXECUTION_TIME} seconds"

    - name: Cleanup
      if: always()
      run: docker compose down -v

    - name: Save execution time
      run: echo "raw_commands,${{ env.RAW_COMMANDS_TIME }}" > raw_commands_time.csv

    - name: Upload execution time artifact
      uses: actions/upload-artifact@v4
      with:
        name: raw-commands-time
        path: raw_commands_time.csv

  e2e-make:
    name: E2E Test - Make
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment variables
      uses: ./.github/actions/setup-env

    - name: Setup Go Project
      uses: ./.github/actions/setup-go-project

    - name: Update compose.yml with registry image
      run: |
        IMAGE_NAME="ghcr.io/${{ github.repository }}:${{ needs.build-and-push-image.outputs.image-tag }}"
        sed -i "s|image: api:latest|image: $IMAGE_NAME|g" compose.yml
        echo "Updated compose.yml to use image: $IMAGE_NAME"

    - name: Setup Docker Services
      uses: ./.github/actions/setup-docker-services

    - name: Start timer
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Run E2E tests with Make
      run: |
        make setup
        make test-e2e

    - name: Calculate execution time
      run: |
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        echo "MAKE_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "Make execution time: ${EXECUTION_TIME} seconds"

    - name: Cleanup
      if: always()
      run: docker compose down -v

    - name: Save execution time
      run: echo "make,${{ env.MAKE_TIME }}" > make_time.csv

    - name: Upload execution time artifact
      uses: actions/upload-artifact@v4
      with:
        name: make-time
        path: make_time.csv

  e2e-task:
    name: E2E Test - Task
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment variables
      uses: ./.github/actions/setup-env

    - name: Setup Go Project
      uses: ./.github/actions/setup-go-project

    - name: Update compose.yml with registry image
      run: |
        IMAGE_NAME="ghcr.io/${{ github.repository }}:${{ needs.build-and-push-image.outputs.image-tag }}"
        sed -i "s|image: api:latest|image: $IMAGE_NAME|g" compose.yml
        echo "Updated compose.yml to use image: $IMAGE_NAME"

    - name: Install Task
      run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: Setup Docker Services
      uses: ./.github/actions/setup-docker-services

    - name: Start timer
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Run E2E tests with Task
      run: |
        task setup
        task test:e2e

    - name: Calculate execution time
      run: |
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        echo "TASK_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "Task execution time: ${EXECUTION_TIME} seconds"

    - name: Cleanup
      if: always()
      run: docker compose down -v

    - name: Save execution time
      run: echo "task,${{ env.TASK_TIME }}" > task_time.csv

    - name: Upload execution time artifact
      uses: actions/upload-artifact@v4
      with:
        name: task-time
        path: task_time.csv

  compare-results:
    name: Compare Execution Times
    runs-on: ubuntu-latest
    needs: [e2e-raw-commands, e2e-make, e2e-task]
    if: always()

    steps:
    - name: Download all execution time artifacts
      uses: actions/download-artifact@v4

    - name: Combine results and create comparison
      run: |
        echo "method,execution_time_seconds" > comparison_results.csv

        if [ -f raw-commands-time/raw_commands_time.csv ]; then
          cat raw-commands-time/raw_commands_time.csv >> comparison_results.csv
        else
          echo "raw_commands,failed" >> comparison_results.csv
        fi

        if [ -f make-time/make_time.csv ]; then
          cat make-time/make_time.csv >> comparison_results.csv
        else
          echo "make,failed" >> comparison_results.csv
        fi

        if [ -f task-time/task_time.csv ]; then
          cat task-time/task_time.csv >> comparison_results.csv
        else
          echo "task,failed" >> comparison_results.csv
        fi

        echo "=== E2E Test Execution Time Comparison ==="
        cat comparison_results.csv

        echo "## E2E Test Performance Comparison Results" > comparison_summary.md
        echo "" >> comparison_summary.md
        echo "| Method | Execution Time (seconds) |" >> comparison_summary.md
        echo "|--------|-------------------------|" >> comparison_summary.md

        while IFS=',' read -r method time; do
          if [ "$method" != "method" ]; then
            echo "| $method | $time |" >> comparison_summary.md
          fi
        done < comparison_results.csv

        echo "" >> comparison_summary.md
        echo "Generated on: $(date)" >> comparison_summary.md

        cat comparison_summary.md

    - name: Upload comparison results
      uses: actions/upload-artifact@v4
      with:
        name: comparison-results
        path: |
          comparison_results.csv
          comparison_summary.md

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const summary = fs.readFileSync('comparison_summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } catch (error) {
            console.log('Could not read comparison summary:', error);
          }
