version: "3"

output: prefixed

dotenv: [".env"]

vars:
  E2E_TEST_NAME:
    sh: find ./e2e -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | sort | uniq

tasks:
  default:
    silent: true
    desc: "利用可能なタスクを一覧表示します"
    cmds:
      - task --list-all

  # --------------------------------------------------------------------------
  # Setup Tasks
  # --------------------------------------------------------------------------

  :setup:mysql:macos:
    internal: true
    prefix: "🔧"
    platforms:
    - darwin
    status:
      - command -v mysql >/dev/null 2>&1
    cmds:
      - brew install mysql-client

  :setup:mysql:linux:
    internal: true
    prefix: "🔧"
    platforms:
    - linux
    status:
      - command -v mysql >/dev/null 2>&1
    cmds:
      - task: :setup:mysql:linux:apt
      - task: :setup:mysql:linux:yum
      - task: :setup:mysql:linux:dnf
      - task: :setup:mysql:linux:pacman
      - task: :setup:mysql:linux:zypper

  :setup:mysql:linux:apt:
    internal: true
    prefix: "🔧"
    status:
      - command -v apt >/dev/null 2>&1
    cmds:
      - sudo apt-get update && sudo apt-get install -y mysql-client

  :setup:mysql:linux:yum:
    internal: true
    prefix: "🔧"
    status:
      - command -v yum >/dev/null 2>&1
    cmds:
      - sudo yum install -y mysql

  :setup:mysql:linux:dnf:
    internal: true
    prefix: "🔧"
    status:
      - command -v dnf >/dev/null 2>&1
    cmds:
      - sudo dnf install -y mysql

  :setup:mysql:linux:pacman:
    internal: true
    prefix: "🔧"
    status:
      - command -v pacman >/dev/null 2>&1
    cmds:
      - sudo pacman -S --noconfirm mysql

  :setup:mysql:linux:zypper:
    internal: true
    prefix: "🔧"
    status:
      - command -v zypper >/dev/null 2>&1
    cmds:
      - sudo zypper install -y mysql-client

  :setup:mysql:windows:
    internal: true
    prefix: "🔧"
    platforms:
    - windows
    status:
      - command -v mysql >/dev/null 2>&1
    cmds:
      - winget install --id Oracle.MySQL

  :setup:mysql:
    internal: true
    cmds:
      - task: :setup:mysql:macos
      - task: :setup:mysql:linux
      - task: :setup:mysql:windows

  :setup:hurl:macos:
    internal: true
    prefix: "🔧"
    platforms:
    - darwin
    status:
      - command -v hurl >/dev/null 2>&1
    cmds:
      - brew install hurl

  :setup:hurl:linux:
    internal: true
    prefix: "🔧"
    platforms:
    - linux
    status:
      - command -v hurl >/dev/null 2>&1
    vars:
      HURL_VERSION:
        sh: curl -s https://api.github.com/repos/Orange-OpenSource/hurl/releases/latest | grep tag_name | cut -d '"' -f 4
    cmds:
      - |
        curl -LO https://github.com/Orange-OpenSource/hurl/releases/latest/download/hurl-{{.HURL_VERSION}}-x86_64-unknown-linux-gnu.tar.gz
        tar -xzf hurl-{{.HURL_VERSION}}-x86_64-unknown-linux-gnu.tar.gz
        sudo mv hurl-{{.HURL_VERSION}}-x86_64-unknown-linux-gnu/bin/hurl /usr/local/bin/
        rm -rf hurl-{{.HURL_VERSION}}-x86_64-unknown-linux-gnu.tar.gz

  :setup:hurl:windows:
    internal: true
    prefix: "🔧"
    platforms:
    - windows
    status:
      - command -v hurl >/dev/null 2>&1
    cmds:
      - winget install hurl

  :setup:hurl:
    internal: true
    cmds:
      - task: :setup:hurl:macos
      - task: :setup:hurl:linux
      - task: :setup:hurl:windows

  :setup:shlack:
    internal: true
    prefix: "🔧"
    status:
      - command -v shlack >/dev/null 2>&1
    cmds:
      - curl --location https://raw.githubusercontent.com/ageha734/shlack/master/install.sh | bash

  setup:
    desc: "✅ 開発に必要なCLIツールをインストールします"
    summary: |
      このプロジェクトで利用する各種コマンドラインツールをセットアップします。
      ツールがすでにインストールされている場合は、そのツールのインストールはスキップされます。
    deps:
      - :setup:mysql
      - :setup:hurl
      - :setup:shlack
    cmds:
      - echo "👍 全てのツールのセットアップが完了しました。"

  # --------------------------------------------------------------------------
  # Development Tasks
  # --------------------------------------------------------------------------
  :run-command:
    internal: true
    silent: true
    vars:
      TARGET: '{{if .SERVICENAME}}{{.SERVICENAME}}{{else}}{{.E2E_TEST_NAME}}{{end}}'
    preconditions:
      - sh: 'if [ -n "{{.SERVICENAME}}" ]; then echo "{{.E2E_TEST_NAME}}" | grep -q -w "{{.SERVICENAME}}"; fi'
        msg: "指定された '{{.SERVICENAME}}' が見つかりません。"
    cmds:
      - for:
          var: TARGET
        task: '{{.COMMAND}}'
        vars:
          SERVICENAME: '{{.ITEM}}'

  mod:
    desc: "📦 Goモジュールの依存関係を整理・ダウンロードします"
    prefix: "📦"
    silent: true
    cmds:
    - go mod tidy
    - go mod download

  build:
    desc: "🔨 アプリケーションをビルドします"
    summary: |
      Goモジュールの依存関係を解決した後、`./cmd/main.go`をビルドして
      `./.target/app`にバイナリを生成します。
    prefix: "🔨"
    deps:
    - mod
    sources:
    - "./**/*.go"
    cmds:
    - go build -o ./.target/app ./cmd/main.go
    generates:
    - "./.target/app"

  dev:
    desc: "⚡️ 開発モードでアプリケーションを起動します（ファイル変更を監視）"
    summary: |
      `go run`コマンドでアプリケーションを直接実行します。
      `watch: true`が設定されているため、Goファイルの変更を検知すると自動的に再起動します。
    prefix: "⚡️"
    watch: true
    sources:
      - "**/*.go"
    cmds:
      - cmd: mysql -h 127.0.0.1 -P $DATABASE_PORT -u $DATABASE_USER -p$DATABASE_PASSWORD $DATABASE_NAME < './mock/seed.sql'
      - cmd: TEST=true go run ./cmd/main.go

  # --------------------------------------------------------------------------
  # Test & Lint Tasks
  # --------------------------------------------------------------------------
  lint:
    silent: true
    desc: "🔍 golangci-lintを実行してコードを静的解析します"
    prefix: "🔍"
    sources:
    - "**/*.go"
    cmds:
    - go tool golangci-lint run ./...

  test:unit:
    silent: true
    desc: "🔬 ユニットテストを実行します"
    summary: "`tenntenn/testtime`を使用して時刻を固定し、ユニットテストを実行します。"
    prefix: "🔬"
    deps:
    - mod
    sources:
    - "**/*.go"
    cmds:
    - TEST=true go test ./... -overlay=$(go run github.com/tenntenn/testtime/cmd/testtime@latest)

  check:
    desc: "🛡️ リンターとすべてのテスト（ユニット、E2E）を実行します"
    deps:
    - lint
    - test:unit
    - build

  password:
    silent: true
    desc: "🔒 パスワードを生成します"
    prefix: "🔒"
    cmds:
    - go run scripts/temp_hash.go {{.CLI_ARGS}}

  test:e2e:single:
    internal: true
    silent: true
    prefix: "🚀 -{{.SERVICENAME}}-"
    cmds:
    - cmd: mysql -h 127.0.0.1 -P $DATABASE_PORT -u $DATABASE_USER -p$DATABASE_PASSWORD $DATABASE_NAME < './mock/seed.sql'
    - cmd: mysql -h 127.0.0.1 -P $DATABASE_PORT -u $DATABASE_USER -p$DATABASE_PASSWORD $DATABASE_NAME < './e2e/{{.SERVICENAME}}/01-insert.sql'
    - cmd: hurl --test './e2e/{{.SERVICENAME}}/index.hurl'
      ignore_error: true
    - cmd: mysql -h 127.0.0.1 -P $DATABASE_PORT -u $DATABASE_USER -p$DATABASE_PASSWORD $DATABASE_NAME < './e2e/{{.SERVICENAME}}/02-delete.sql'

  test:e2e:
    silent: false
    desc: "🚀 E2Eテストを実行します（引数でサービス名を指定可能）"
    summary: |
      アプリケーションをビルドした後、E2Eテストを実行します。
      引数でテスト対象のサービス名を指定できます。指定しない場合は全てのテストが実行されます。
      実行結果はSlackに通知されます。

      例:
        task test:e2e -- service1  # service1のテストのみ実行
        task test:e2e              # 全てのテストを実行
    prefix: "🚀"
    cmds:
    # - defer: shlack channel '{{if .EXIT_CODE}}Failed with!{{else}}Success!{{end}}'
    - task: :run-command
      vars:
        COMMAND: test:e2e:single
        SERVICENAME: '{{.CLI_ARGS}}'
    generates:
    - "./result/{{.SERVICENAME}}.json"
