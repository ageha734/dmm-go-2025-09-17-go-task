version: "3"

output: prefixed

dotenv: [".env"]

vars:
  E2E_TEST_NAME:
    sh: find ./e2e -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | sort | uniq

tasks:
  default:
    silent: true
    desc: "利用可能なタスクを一覧表示します"
    cmds:
      - task --list-all

  # --------------------------------------------------------------------------
  # Setup Tasks
  # --------------------------------------------------------------------------
  :setup:mysql:
    internal: true
    prefix: "🔧"
    status:
      - command -v mysql >/dev/null 2>&1
    cmds:
      - |
        echo "mysql-clientをインストールします..."
        # TODO: バイナリをダウンロードして、PATHに追加する

  :setup:hurl:
    internal: true
    prefix: "🔧"
    status:
      - command -v hurl >/dev/null 2>&1
    cmds:
      - |
        echo "hurlをインストールします..."
        curl --location https://hurl.dev/install.sh | bash

  :setup:shlack:
    internal: true
    prefix: "🔧"
    status:
      - command -v shlack >/dev/null 2>&1
    cmds:
      - |
        echo "shlackをインストールします..."
        curl --location https://raw.githubusercontent.com/dmm-com/shlack/install.sh | bash

  setup:
    desc: "✅ 開発に必要なCLIツールをインストールします"
    summary: |
      このプロジェクトで利用する各種コマンドラインツールをセットアップします。
      ツールがすでにインストールされている場合は、そのツールのインストールはスキップされます。
    deps:
      - :setup:mysql
      - :setup:hurl
      - :setup:shlack
    cmds:
      - echo "👍 全てのツールのセットアップが完了しました。"

  # --------------------------------------------------------------------------
  # Development Tasks
  # --------------------------------------------------------------------------
  :run-command:
    internal: true
    silent: true
    vars:
      TARGET: '{{if .SERVICENAME}}{{.SERVICENAME}}{{else}}{{.E2E_TEST_NAME}}{{end}}'
    preconditions:
      - sh: 'if [ -n "{{.SERVICENAME}}" ]; then echo "{{.E2E_TEST_NAME}}" | grep -q -w "{{.SERVICENAME}}"; fi'
        msg: "指定された '{{.SERVICENAME}}' が見つかりません。"
    cmds:
      - for:
          var: TARGET
        task: '{{.COMMAND}}'
        vars:
          SERVICENAME: '{{.ITEM}}'

  mod:
    desc: "📦 Goモジュールの依存関係を整理・ダウンロードします"
    prefix: "📦"
    silent: true
    cmds:
    - go mod tidy
    - go mod download

  build:
    desc: "🔨 アプリケーションをビルドします"
    summary: |
      Goモジュールの依存関係を解決した後、`./cmd/main.go`をビルドして
      `./.target/app`にバイナリを生成します。
    prefix: "🔨"
    deps:
    - mod
    sources:
    - "./**/*.go"
    cmds:
    - go build -o ./.target/app ./cmd/main.go
    generates:
    - "./.target/app"

  dev:
    desc: "⚡️ 開発モードでアプリケーションを起動します（ファイル変更を監視）"
    summary: |
      `go run`コマンドでアプリケーションを直接実行します。
      `watch: true`が設定されているため、Goファイルの変更を検知すると自動的に再起動します。
    prefix: "⚡️"
    watch: true
    sources:
      - "**/*.go"
    cmds:
      - go run ./cmd/main.go

  # --------------------------------------------------------------------------
  # Test & Lint Tasks
  # --------------------------------------------------------------------------
  lint:
    desc: "🔍 golangci-lintを実行してコードを静的解析します"
    prefix: "🔍"
    cmds:
    - go tool golangci-lint run ./...

  test:unit:
    desc: "🔬 ユニットテストを実行します"
    summary: "`tenntenn/testtime`を使用して時刻を固定し、ユニットテストを実行します。"
    prefix: "🔬"
    deps:
    - mod
    cmds:
    - go test ./... -overlay=$(go run github.com/tenntenn/testtime/cmd/testtime@latest)

  check:
    desc: "🛡️ リンターとすべてのテスト（ユニット、E2E）を実行します"
    deps:
    - lint
    - test:unit
    - build

  mysql:
    internal: true
    silent: true
    prefix: "🚀 [{{.SERVICENAME}}]"
    cmds:
    - mysql -u $DATABASE_USER -h $DATABASE_HOST -P $DATABASE_PORT -p$DATABASE_PASSWORD $DATABASE_NAME < '{{.DML}}'
    - hurl --test './e2e/{{.SERVICENAME}}/index.hurl'

  test:e2e:db:
    internal: true
    silent: true
    sources:
    - "./e2e/{{.SERVICENAME}}/*.sql"
    cmds:
    - for: sources
      task: mysql
      vars:
        SERVICENAME: '{{.SERVICENAME}}'
        DML: '{{.ITEM}}'

  test:e2e:single:
    internal: true
    silent: true
    sources:
    - "./e2e/{{.SERVICENAME}}/index.hurl"
    cmds:
    - task: test:e2e:db
      vars:
        SERVICENAME: '{{.SERVICENAME}}'

  test:e2e:
    desc: "🚀 E2Eテストを実行します（引数でサービス名を指定可能）"
    summary: |
      アプリケーションをビルドした後、E2Eテストを実行します。
      引数でテスト対象のサービス名を指定できます。指定しない場合は全てのテストが実行されます。
      実行結果はSlackに通知されます。

      例:
        task test:e2e -- service1  # service1のテストのみ実行
        task test:e2e              # 全てのテストを実行
    cmds:
    - defer: shlack luke '{{if .EXIT_CODE}}Failed with{{.EXIT_CODE}}!{{else}}Success!{{end}}'
    - task: :run-command
      vars:
        COMMAND: test:e2e:single
        SERVICENAME: '{{.CLI_ARGS}}'
    generates:
    - "./result/{{.SERVICENAME}}.json"
